AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: For aws training - week 6
Parameters:
  CloudWatchEventRuleName:
    Description: CloudWatch Event Rule Name
    Default: yyl-week6-scheduled-rule
    Type: String
  AlarmEmail: 
    Default: "plin005@163.com"
    Description: "Email address to notify the scheduled events"
    Type: "String"
  SNSTopicName:
    Description: SNS Topic Name
    Default: yyl-week6-alarm-sns-topic
    Type: String
  MessageQueueName:
    Description: My Message Queue Name
    Default: yyl-week6-message-queue
    Type: String
  DeadLetterQueueName:
    Description: My Dead Letter Queue Name
    Default: yyl-week6-dead-letter-queue
    Type: String
  LambdaFunctionName:
    Description: Lambda Function Name
    Default: yyl-week6-lambda-function
    Type: String
  LambdaRoleName:
    Description: Lambda Role Name
    Default: yyl-week6-lambda-role
    Type: String
  LambdaPolicyForLogName:
    Description: Lambda Policy for Log Name
    Default: yyl-week6-lambda-policy-log
    Type: String
  LambdaPolicyForSQSName:
    Description: Lambda Policy for SQS Name
    Default: yyl-week6-lambda-policy-sqs
    Type: String
  LambdaPolicyForCloudWatchName:
    Description: Policy Name
    Default: yyl-week6-lambda-policy-cloudWatch
    Type: String

Resources:
  CloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Ref CloudWatchEventRuleName
      Description: ScheduledRule in CloudWatch Event to trigger SNS Topic
      ScheduleExpression: rate(5 minutes)
      State: ENABLED
      Targets: 
        - Arn: !Ref MySNSTopic
          Id: !Ref SNSTopicName  
        
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: !Ref SNSTopicName
      # KmsMasterKeyId: d32a3954-b7a1-4384-904b-9265e457c8a9
      Tags:
        - Key: owner
          Value: yyl
  
  SNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 
              - sns:Publish
            Resource: !Ref MySNSTopic
      Topics:
        - !Ref MySNSTopic

  SNSEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !Ref AlarmEmail
      Protocol: email
      TopicArn: !Ref MySNSTopic
      # RedrivePolicy: 
      #   deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
      
      # DeliveryPolicy defines how Amazon SNS retries failed deliveries to HTTP/S endpoints.
      # DeliveryPolicy:
      #   healthyRetryPolicy:
      #     numRetries: 20
      #     minDelayTarget: 10
      #     maxDelayTarget: 30
      #     numMinDelayRetries: 3
      #     numMaxDelayRetries: 17
      #     numNoDelayRetries: 0
      #     backoffFunction: exponential

  SNSSqsSubscription:
    Type: AWS::SNS::Subscription
    Properties: 
      Endpoint: !GetAtt MyMessageQueue.Arn
      Protocol: sqs
      TopicArn: !Ref MySNSTopic
    
  MyMessageQueue:
    Type: AWS::SQS::Queue
    Properties: 
      # 保留消息7天(=60*60*24*7)
      MessageRetentionPeriod: 604800
      QueueName: !Ref MessageQueueName
      # KmsMasterKeyId: d32a3954-b7a1-4384-904b-9265e457c8a9
      # ReceiveMessageWaitTimeSeconds: Integer
      RedrivePolicy:
        # 在超出 maxReceiveCount 值后，Amazon SQS 将消息移动到 deadletterQueue
        deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
        # deadletterQueue最大可接收来自SQS的Message
        maxReceiveCount: 1
      # 消息将不可用的时间长度为5分钟
      VisibilityTimeout: 300
      Tags:
        - Key: owner
          Value: yyl
  
  MyDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref DeadLetterQueueName
      Tags:
        - Key: owner
          Value: yyl

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt MyMessageQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref MySNSTopic
      Queues:
        - !Ref MyMessageQueue
        
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${LambdaFunctionName}
      RetentionInDays: 7

  MyLambda:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaLogGroup
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Runtime: nodejs12.x
      CodeUri: ../../output/
      MemorySize: 128
      Timeout: 3  

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Ref LambdaPolicyForLogName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:log-group:/aws/lambda/*:*
        - PolicyName: !Ref LambdaPolicyForSQSName
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt MyMessageQueue.Arn
      Tags:
        - Key: owner
          Value: yyl  
  
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties: 
      EventSourceArn: !GetAtt MyMessageQueue.Arn
      FunctionName: !Ref MyLambda
      